# -*- coding: utf-8 -*-
"""Level 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-jAKkeZDC59KreMe93Q_HV1lQvCD4VXb

Level 1: Data Exploration & Descriptive Analysis

Task 1: Data Exploration and Preprocessing
"""

import numpy as np
import pandas as pd

path = '/content/Dataset .csv'
df = pd.read_csv(path)
print("Total Restaurant: ", len(df))
print("Toatal Rows & Columns: ", df.shape)
df.head(5)

df.info()

df.describe()

df.dtypes

"""Data Cleaning"""

df.isnull().sum()

# Clean Columns
def clean_dataframe(df):
  def clean_column(col):
    if col.dtype == 'object':
      # Strip whitespace and replace empty strings with NaN
      return col.str.strip().replace('', np.nan)
    elif pd.api.types.is_numeric_dtype(col):
      # Replace infinite values with NaN
      return col.replace([np.inf, -np.inf], np.nan)
    else:
      return col  # Leave other types untouched (e.g., datetime, bool)

  return df.apply(clean_column)
df = clean_dataframe(df)

"""Check Duplication"""

df[df.duplicated()]

df.drop_duplicates(inplace=True)

df.isnull().sum()

df['Cuisines'].isnull().sum()

missing_cuisines = df[df['Cuisines'].isna()]
print(missing_cuisines[['Restaurant ID', 'Cuisines']])

df['Cuisines'] = df.groupby('Locality')['Cuisines'].transform(
    lambda x: x.fillna(x.mode()[0] if not x.mode().empty else 'Unknown')
)
print("Missing after fill:", df['Cuisines'].sum())

df['Cuisines'].isnull().sum()

top_cuisines = df.groupby('Locality')['Cuisines'].agg(lambda x: x.mode()[0])
print(top_cuisines.head(10))

"""Exploratory Data Analysis (EDA)"""

import seaborn as sns
import matplotlib.pyplot as plt

# Count top 10 cuisines
top_cuisines = df['Cuisines'].value_counts().head(10)

# Plot pie chart
plt.figure(figsize=(8, 8))
plt.pie(top_cuisines.values, labels=top_cuisines.index, autopct='%1.1f%%')
plt.title('Top 10 Cuisines Distribution')
plt.xlabel('Cuisines')
plt.ylabel('Percentage')
plt.axis('equal')
plt.savefig('Cuisines_Distribution.png')
plt.show()

top_cuisines.plot(kind='bar', figsize=(10, 6))
plt.title('Top Cuisines by Locality')
plt.xlabel('Cuisines')
plt.ylabel('Count')
plt.xticks(rotation=45)
plt.savefig('Top_Cuisines_by_Locality.png')
plt.show()

# Check data types
print("Data types:\n ", df.dtypes)

"""Data Conversion"""

# Convert 'Average Cost for two' int into float
df['Average Cost for two'] = df['Average Cost for two'].astype(float)

"""Analyze Target Variable"""

# Summary Statistics
print("Summary Statistics:\n", df['Aggregate rating'].describe())

# Value Count
print("Rating distribution:\n", df['Aggregate rating'].value_counts().sort_index())

plt.figure(figsize=(10, 6))
sns.histplot(df['Aggregate rating'], bins=20, kde=True)
plt.title('Distribution of Aggregate Rating')
plt.xlabel('Aggregate Rating')
plt.ylabel('Frequency')
plt.savefig('Aggregate_Rating_Distribution.png')
plt.show()

"""Class Imbalance Check"""

# Convert Rating to Categories
def rating_category(rating):
    if rating >= 4.5:
        return 'Excellent'
    elif rating >= 3.5:
        return 'Good'
    elif rating >= 2.5:
        return 'Average'
    else:
        return 'Poor'

df['Rating Category'] = df['Aggregate rating'].apply(rating_category)

# Check class balance
class_balance = df['Rating Category'].value_counts()
print("Class Balance:\n", class_balance)

class_balance.to_excel('Class_Balance.xlsx')

sns.countplot(x='Rating Category', data=df)
plt.title('Rating Category Distribution')
plt.xlabel('Rating Category')
plt.ylabel('Count')
plt.savefig('Rating_Category_Distribution.png')
plt.show()

"""Task 2: Descriptive Analysis

Basic Statistical Measures for Numerical Columns
"""

# Basic statistics
numerical_cols = ['Average Cost for two', 'Price range', 'Aggregate rating', 'Votes']
stats = df[numerical_cols].describe().T
print("Basic Statistics:\n", stats)

stats.to_excel('Basic_Statistics.xlsx')

"""Numerical Statistics"""

# Histograms
plt.figure(figsize=(12, 8))
for i, col in enumerate(numerical_cols):
    plt.subplot(2, 2, i+1)
    sns.histplot(df[col], kde=True, bins=30)
    plt.title(f'Distribution of {col}')
plt.tight_layout()
plt.savefig('Numerical_Distributions.png')
plt.show()

"""Map Country Codes and Explore Categorical Distributions"""

# Map country codes
country_map = {
    1: 'India', 14: 'Australia', 30: 'Brazil', 37: 'Canada',
    94: 'Indonesia', 148: 'New Zealand', 162: 'Philippines',
    166: 'Qatar', 184: 'Singapore', 189: 'South Africa',
    191: 'Sri Lanka', 208: 'Turkey', 214: 'UAE',
    215: 'United Kingdom', 216: 'United States'
}
df['Country'] = df['Country Code'].map(country_map)

# Categorical distributions
print("Country Distribution:\n", df['Country'].value_counts())
print("City Distribution:\n", df['City'].value_counts().head(10))
print("Cuisine Distribution:\n", df['Cuisines'].value_counts().head(10))

"""Top Cities and Cuisines by Restaurant Count"""

# Top cities
top_cities = df['City'].value_counts().head(10)
print("Top Cities:\n", top_cities)

# Top cuisines
top_cuisines = df['Cuisines'].value_counts().head(10)
print("Top Cuisines:\n", top_cuisines)

"""Country & City Distribution"""

# Country distribution
plt.figure(figsize=(10, 5))
country_counts = df['Country'].value_counts()
sns.barplot(x=country_counts.index, y=country_counts.values)
plt.xticks(rotation=45)
plt.title('Restaurant Count by Country')
plt.ylabel('Count')
plt.savefig('Country_Distribution.png')
plt.show()

# City distribution
plt.figure(figsize=(10, 5))
top_cities = df['City'].value_counts().head(10)
sns.barplot(x=top_cities.index, y=top_cities.values)
plt.xticks(rotation=45)
plt.title('Top 10 Cities by Restaurant Count')
plt.ylabel('Count')
plt.savefig('City_Distribution.png')
plt.show()

"""Cuisine Distribution"""

# Top cuisines
plt.figure(figsize=(10, 5))
top_cuisines = df['Cuisines'].value_counts().head(10)
sns.barplot(x=top_cuisines.index, y=top_cuisines.values)
plt.xticks(rotation=45, ha='right')
plt.title('Top 10 Cuisines by Restaurant Count')
plt.ylabel('Count')
plt.savefig('Cuisine_Distribution.png')
plt.show()

"""Task 3:  Geospatial Analysis"""

df[['Latitude', 'Longitude']].head()

"""Visualize Restaurant Locations on a Map"""

import folium
from folium.plugins import MarkerCluster

# Center the map on average  location
center_lat = df['Latitude'].mean()
center_lon = df['Longitude'].mean()

# Create base map
map = folium.Map(location=[center_lat, center_lon], zoom_start=2)

# Add markers
marker_cluster = MarkerCluster().add_to(map)
for _, row in df.iterrows():
    folium.Marker(
        location=[row['Latitude'], row['Longitude']],
        popup=f"{row['Restaurant Name']} ({row['Aggregate rating']})"
    ).add_to(marker_cluster)

# Display the map
map

print(df[['Latitude', 'Longitude', 'Aggregate rating']].corr())

"""Location vs Rating Analysis"""

# Scatter plot of location vs rating
plt.figure(figsize=(10,6))
sns.scatterplot(x='Longitude', y='Latitude', hue='Aggregate rating', data=df, palette='viridis')
plt.title("Restaurant Locations Colored by Rating")
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.savefig('Location_vs_Rating.png')
plt.show()

"""Rating by City"""

city_rating = df.groupby('City')['Aggregate rating'].mean().sort_values(ascending=False).head(10)
plt.figure(figsize=(10,6))
sns.barplot(x=city_rating.values, y=city_rating.index, hue=city_rating.values, palette='coolwarm')
plt.title('Average Rating by City')
plt.xlabel('Average Rating')
plt.ylabel('City')
plt.savefig('Rating_by_City.png')
plt.show()

"""Geographic Correlation"""

# Scatter plot of location vs rating
plt.figure(figsize=(10,6))
sns.scatterplot(x='Longitude', y='Latitude', hue='Aggregate rating', data=df, palette='Spectral', alpha=0.6)
plt.title('Restaurant Ratings by Location')
plt.xlabel('Longitude')
plt.ylabel('Latitude')
plt.savefig('Restaurant_Ratings_by_Location.png')
plt.show()